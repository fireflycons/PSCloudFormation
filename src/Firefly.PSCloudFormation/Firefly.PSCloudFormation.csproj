<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <UsingTask TaskName="DetectAwsTools" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <AwsTools ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="C#">
        <![CDATA[
                var searchDirs = new List<string>();

                switch (Environment.OSVersion.Platform)
                {
                    case PlatformID.Unix:
                    case PlatformID.MacOSX:

                        searchDirs.Add("/usr/local/share/powershell/Modules/AWS.Tools.Common");
                        searchDirs.Add("~/.local/share/powershell/Modules/AWS.Tools.Common");
                        break;

                    default:

                        searchDirs.Add(@"C:\Program Files\WindowsPowerShell\Modules\AWS.Tools.Common");
                        searchDirs.Add(Path.Combine(
                            Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                            @"WindowsPowerShell\Modules\AWS.Tools.Common"));
                        searchDirs.Add(@"C:\Program Files\PowerShell\Modules\AWS.Tools.Common");
                        searchDirs.Add(Path.Combine(
                            Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                            @"PowerShell\Modules\AWS.Tools.Common"));
                        break;
                }

                AwsTools = (from dir in searchDirs
                        where Directory.Exists(dir)
                        let dirs = Directory.GetDirectories(dir, "*", SearchOption.TopDirectoryOnly)
                            .Select(d => new Version(Path.GetFileName(d))).OrderByDescending(d => d).ToList()
                        where dirs.Any()
                        select Path.Combine(dir, dirs.First().ToString(), "AWS.Tools.Common.dll"))
                    .FirstOrDefault(File.Exists);
            ]]>
      </Code>
    </Task>
  </UsingTask>
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <Version>4.0.37</Version>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <FileVersion>4.0.37.0</FileVersion>
  </PropertyGroup>
  <PropertyGroup>
    <DocumentationFile>$(ProjectDir)Firefly.PSCloudFormation.xml</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Condition="'$(APPVEYOR)'!=''">
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <OutputPath>$(SolutionDir)PSCloudFormation</OutputPath>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="AWSSDK.S3" Version="3.5.0.*" />
    <PackageReference Include="AWSSDK.SecurityToken" Version="3.5.0.*" />
    <PackageReference Include="Firefly.CrossPlatformZip" Version="0.5.0" />
    <PackageReference Include="Firefly.PowerShell.DynamicParameters" Version="0.2.1" />
    <PackageReference Include="PowerShellStandard.Library" Version="5.1.0" />
  </ItemGroup>
  <ItemGroup Condition="'$(OS)' == 'Windows_NT'">
    <PackageReference Include="XmlDoc2CmdletDoc" Version="0.3.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>
  <ItemGroup Condition="'$(SolutionName)' == 'Firefly.PSCloudFormation.debug'">
    <ProjectReference Include="..\Firefly.CloudFormation\Firefly.CloudFormation.csproj" />
  </ItemGroup>
  <ItemGroup Condition="'$(SolutionName)' == 'Firefly.PSCloudFormation'">
    <PackageReference Include="Firefly.CloudFormation" Version="0.3.1" />
  </ItemGroup>
  <ItemGroup>
    <None Update="debug.ps1">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Update="PSCloudFormation.psd1">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>
  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Message Importance="High" Text="Post Build" />
    <Exec Command="echo $(TargetDir) &gt; &quot;$(SolutionDir)ModulePath.txt&quot;" />
  </Target>
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
    <DetectAwsTools >
      <Output TaskParameter="AwsTools" PropertyName="AwsTools" />
    </DetectAwsTools>
    <Error Condition="'$(AwsTools)' == ''" Text="Cannot locate AWS Tools" />
    <Message Importance="High" Text="AWS TOOLS: $(AwsTools)" />
    <Message Importance="High" Text="TargetDir: $(TargetDir)" />
    <ItemGroup>
      <Reference Include="AWS.Tools.Common">
        <HintPath>$(AwsTools)</HintPath>
      </Reference>
    </ItemGroup>
  </Target>
</Project>