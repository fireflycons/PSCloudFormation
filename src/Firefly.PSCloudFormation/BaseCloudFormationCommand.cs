namespace Firefly.PSCloudFormation
{
    using System;
    using System.Collections.ObjectModel;
    using System.Management.Automation;
    using System.Management.Automation.Host;
    using System.Security.Authentication;
    using System.Threading.Tasks;

    using Amazon;
    using Amazon.CloudFormation;
    using Amazon.PowerShell.Utils;
    using Amazon.Runtime;

    using Firefly.CloudFormation;
    using Firefly.CloudFormation.CloudFormation;

    using AWSRegion = Amazon.PowerShell.Common.AWSRegion;

    /// <summary>
    /// Contains parameters common to all commands that work with CloudFormation stacks.
    /// </summary>
    public abstract class BaseCloudFormationCommand : CloudFormationServiceCommand
    {
        /// <summary>
        /// Gets or sets the client request token.
        /// <para type="description">
        /// A unique identifier for this CreateStack request. Specify this token if you plan to retry requests so that AWS CloudFormation knows that you're not attempting to create a stack with the same name.
        /// You might retry CreateStack requests to ensure that AWS CloudFormation successfully received them.
        /// All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations.
        /// For example, if you execute a CreateStack operation with the token token1, then all the StackEvents generated by that operation will have ClientRequestToken set as token1.
        /// In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format Console-StackOperation-ID,
        /// which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: <c>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</c>.
        /// </para>
        /// </summary>
        /// <value>
        /// The client request token.
        /// </value>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public string ClientRequestToken { get; set; }

        /// <summary>
        /// Gets or sets the force.
        /// <para type="description">
        /// This parameter overrides confirmation prompts to force the cmdlet to continue its operation. This parameter should always be used with caution.
        /// </para>
        /// </summary>
        /// <value>
        /// The force.
        /// </value>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter Force { get; set; }

        /// <summary>
        /// Gets or sets the pass thru.
        /// <para type="description">
        /// If used in conjunction with -Wait, return stack ARN instead of stack status
        /// </para>
        /// </summary>
        /// <value>
        /// The pass thru.
        /// </value>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter PassThru { get; set; }

        /// <summary>
        /// Gets or sets the role arn.
        /// <para type="description">
        /// The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes to create the stack.
        /// AWS CloudFormation uses the role's credentials to make calls on your behalf. AWS CloudFormation always uses this role for all future operations on the stack.
        /// As long as users have permission to operate on the stack, AWS CloudFormation uses this role even if the users don't have permission to pass it.
        /// Ensure that the role grants least privilege.If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack.
        /// If no role is available, AWS CloudFormation uses a temporary session that is generated from your user credentials.
        /// </para>
        /// </summary>
        /// <value>
        /// The role arn.
        /// </value>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        // ReSharper disable once InconsistentNaming
        // ReSharper disable once StyleCop.SA1650
        public string RoleARN { get; set; }

        /// <summary>
        /// Gets or sets the s3 endpoint URL.
        /// <para type="description">
        /// The endpoint to make S3 calls against.Note: This parameter is primarily for internal AWS use and is not required/should not be specified for normal usage.
        /// The cmdlets normally determine which endpoint to call based on the region specified to the -Region parameter or set as default in the shell (via Set-DefaultAWSRegion).
        /// Only specify this parameter if you must direct the call to a specific custom endpoint.
        /// </para>
        /// </summary>
        /// <value>
        /// The s3 endpoint URL.
        /// </value>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public string S3EndpointUrl { get; set; }

        /// <summary>
        /// Gets or sets the name of the stack.
        /// <para type="description">
        /// The name that is associated with the stack. The name must be unique in the Region in which you are creating the stack.A stack name can contain only alphanumeric characters (case sensitive) and hyphens.
        /// It must start with an alphabetic character and cannot be longer than 128 characters.
        /// </para>
        /// </summary>
        /// <value>
        /// The name of the stack.
        /// </value>
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true, Mandatory = true)]
        [ValidatePattern(@"[A-Za-z][A-Za-z0-9\-]{0,127}")]
        public string StackName { get; set; }

        /// <summary>
        /// Gets or sets the STS endpoint URL.
        /// The endpoint to make STS calls against.Note: This parameter is primarily for internal AWS use and is not required/should not be specified for normal usage.
        /// The cmdlets normally determine which endpoint to call based on the region specified to the -Region parameter or set as default in the shell (via Set-DefaultAWSRegion).
        /// Only specify this parameter if you must direct the call to a specific custom endpoint.
        /// </summary>
        /// <value>
        /// The STS endpoint URL.
        /// </value>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        // ReSharper disable once InconsistentNaming
        // ReSharper disable once StyleCop.SA1650
        public string STSEndpointUrl { get; set; }

        /// <summary>
        /// Gets or sets the wait.
        /// <para type="description">
        /// If set, then the command waits until the stack operation completes, printing out stack events as it goes.
        /// </para>
        /// </summary>
        /// <value>
        /// The wait.
        /// </value>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter Wait { get; set; }

        /// <summary>
        /// Gets or sets the client factory.
        /// </summary>
        /// <value>
        /// The client factory.
        /// </value>
        protected PSAwsClientFactory ClientFactory { get; set; }

        /// <summary>
        /// Gets or sets the logger.
        /// </summary>
        /// <value>
        /// The logger.
        /// </value>
        protected PSLogger Logger { get; set; }

        /// <summary>
        /// Creates the CloudFormation client using AWS Tools library.
        /// </summary>
        /// <param name="credentials">The credentials.</param>
        /// <param name="region">The region.</param>
        /// <returns>CloudFormation client.</returns>
        protected IAmazonCloudFormation CreateClient(AWSCredentials credentials, RegionEndpoint region)
        {
            var amazonCloudFormationConfig =
                new AmazonCloudFormationConfig { RegionEndpoint = region };

            Common.PopulateConfig(this, amazonCloudFormationConfig);
            this.CustomizeClientConfig(amazonCloudFormationConfig);
            var amazonCloudFormationClient =
                new AmazonCloudFormationClient(credentials, amazonCloudFormationConfig);
            return amazonCloudFormationClient;
        }

        /// <summary>
        /// Gets the builder for <see cref="CloudFormationRunner"/> and populates the fields pertinent to this level.
        /// </summary>
        /// <returns>Builder for <see cref="CloudFormationRunner"/>.</returns>
        protected virtual CloudFormationBuilder GetBuilder()
        {
            return CloudFormationRunner.Builder(this.CreateCloudFormationContext(), this.StackName)
                .WithClientToken(this.ClientRequestToken)
                .WithRoleArn(this.RoleARN)
                .WithWaitForInProgressUpdate(this.Wait);
        }

        /// <summary>
        /// New handler for ProcessRecord. Ensures CloudFormation client is properly disposed.
        /// </summary>
        /// <returns>Output to place into pipeline.</returns>
        protected abstract Task<object> OnProcessRecord();

        /// <summary>
        /// Processes the record.
        /// </summary>
        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            this.ClientFactory = new PSAwsClientFactory(
                this.CreateClient(this._CurrentCredentials, this._RegionEndpoint),
                this.CreateCloudFormationContext());
            
            var task = this.OnProcessRecord();
            task.Wait();

            if (task.Result != null)
            {
                this.WriteObject(task.Result);
            }

            this.ClientFactory?.Dispose();
        }

        /// <summary>
        /// Creates the cloud formation context.
        /// </summary>
        /// <returns>New <see cref="ICloudFormationContext"/></returns>
        protected ICloudFormationContext CreateCloudFormationContext()
        {
            AWSCredentials credentials;

            if (this._CurrentCredentials != null)
            {
                credentials = this._CurrentCredentials;
            }
            else if (this.TryGetCredentials(this.Host, this.SessionState))
            {
                credentials = this._CurrentCredentials;
            }
            else
            {
                throw new AuthenticationException("Cannot determine credentials");
            }

            if (this._CurrentRegion == null)
            {
                this.TryGetRegion(string.IsNullOrEmpty(this._DefaultRegion), out var region, this.SessionState);
                this._RegionEndpoint = region;

                if (this._RegionEndpoint == null)
                {
                    if (string.IsNullOrEmpty(this._DefaultRegion))
                    {
                        this.ThrowExecutionError("No region specified or obtained from persisted/shell defaults.", this, null);
                        return null;
                    }

                    this._RegionEndpoint = RegionEndpoint.GetBySystemName(this._DefaultRegion);
                }
            }

            this.Logger = new PSLogger(this);

            return new PSCloudFormationContext
                       {
                           Region = this._RegionEndpoint,
                           Credentials = credentials,
                           S3EndpointUrl =
                               string.IsNullOrEmpty(this.S3EndpointUrl) ? null : new Uri(this.S3EndpointUrl),
                           STSEndpointUrl = string.IsNullOrEmpty(this.STSEndpointUrl)
                                                ? null
                                                : new Uri(this.S3EndpointUrl),
                           Logger = this.Logger
                       };
        }

        /// <summary>
        /// Asks a yes/no question.
        /// </summary>
        /// <param name="caption">The caption.</param>
        /// <param name="message">The message.</param>
        /// <param name="defaultResponse">The default response.</param>
        /// <param name="helpYes">Help message for Yes response</param>
        /// <param name="helpNo">Help message for No response</param>
        /// <returns>User choice</returns>
        protected ChoiceResponse AskYesNo(string caption, string message, ChoiceResponse defaultResponse, string helpYes, string helpNo)
        {
            return (ChoiceResponse)this.Host.UI.PromptForChoice(
                caption,
                message,
                new Collection<ChoiceDescription>
                    {
                        new ChoiceDescription($"&{ChoiceResponse.Yes}", helpYes),
                        new ChoiceDescription($"&{ChoiceResponse.No}", helpNo)
                    },
                (int)defaultResponse);
        }
    }
}